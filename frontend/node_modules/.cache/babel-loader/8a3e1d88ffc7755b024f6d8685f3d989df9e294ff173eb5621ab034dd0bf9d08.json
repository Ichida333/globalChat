{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: null,\n  reducers: {\n    addNotifications: (state, {\n      payload\n    }) => {\n      if (state.newMessages[payload]) {\n        state.newMessages[payload] = state.newMessages[payload] + 1;\n      } else {\n        state.newMessages[payload] = 1;\n      }\n    },\n    resetNotifications: (state, {\n      payload\n    }) => {\n      delete state.newMessages[payload];\n    }\n  },\n  extraReducers: builder => {\n    // save user after signup\n    builder.addMatcher(appApi.endpoints.signupUser.matchFulfilled, (state, {\n      payload\n    }) => payload);\n    // save user after login\n    builder.addMatcher(appApi.endpoints.loginUser.matchFulfilled, (state, {\n      payload\n    }) => payload);\n    // logout: destroy user session\n    builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n  }\n});\nexport const {\n  addNotifications,\n  resetNotifications\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","appApi","userSlice","name","initialState","reducers","addNotifications","state","payload","newMessages","resetNotifications","extraReducers","builder","addMatcher","endpoints","signupUser","matchFulfilled","loginUser","logoutUser","actions","reducer"],"sources":["/Users/ichidayu/globalChat/frontend/src/features/userSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\n\nexport const userSlice = createSlice({\n    name: \"user\",\n    initialState: null,\n    reducers: {\n        addNotifications: (state, { payload }) => {\n            if (state.newMessages[payload]) {\n                state.newMessages[payload] = state.newMessages[payload] + 1;\n            } else {\n                state.newMessages[payload] = 1;\n            }\n        },\n        resetNotifications: (state, { payload }) => {\n            delete state.newMessages[payload];\n        },\n    },\n\n    extraReducers: (builder) => {\n        // save user after signup\n        builder.addMatcher(appApi.endpoints.signupUser.matchFulfilled, (state, { payload }) => payload);\n        // save user after login\n        builder.addMatcher(appApi.endpoints.loginUser.matchFulfilled, (state, { payload }) => payload);\n        // logout: destroy user session\n        builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n    },\n});\n\nexport const { addNotifications, resetNotifications } = userSlice.actions;\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,oBAAoB;AAEvC,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;EACjCG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE,IAAI;EAClBC,QAAQ,EAAE;IACNC,gBAAgB,EAAEA,CAACC,KAAK,EAAE;MAAEC;IAAQ,CAAC,KAAK;MACtC,IAAID,KAAK,CAACE,WAAW,CAACD,OAAO,CAAC,EAAE;QAC5BD,KAAK,CAACE,WAAW,CAACD,OAAO,CAAC,GAAGD,KAAK,CAACE,WAAW,CAACD,OAAO,CAAC,GAAG,CAAC;MAC/D,CAAC,MAAM;QACHD,KAAK,CAACE,WAAW,CAACD,OAAO,CAAC,GAAG,CAAC;MAClC;IACJ,CAAC;IACDE,kBAAkB,EAAEA,CAACH,KAAK,EAAE;MAAEC;IAAQ,CAAC,KAAK;MACxC,OAAOD,KAAK,CAACE,WAAW,CAACD,OAAO,CAAC;IACrC;EACJ,CAAC;EAEDG,aAAa,EAAGC,OAAO,IAAK;IACxB;IACAA,OAAO,CAACC,UAAU,CAACZ,MAAM,CAACa,SAAS,CAACC,UAAU,CAACC,cAAc,EAAE,CAACT,KAAK,EAAE;MAAEC;IAAQ,CAAC,KAAKA,OAAO,CAAC;IAC/F;IACAI,OAAO,CAACC,UAAU,CAACZ,MAAM,CAACa,SAAS,CAACG,SAAS,CAACD,cAAc,EAAE,CAACT,KAAK,EAAE;MAAEC;IAAQ,CAAC,KAAKA,OAAO,CAAC;IAC9F;IACAI,OAAO,CAACC,UAAU,CAACZ,MAAM,CAACa,SAAS,CAACI,UAAU,CAACF,cAAc,EAAE,MAAM,IAAI,CAAC;EAC9E;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV,gBAAgB;EAAEI;AAAmB,CAAC,GAAGR,SAAS,CAACiB,OAAO;AACzE,eAAejB,SAAS,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}